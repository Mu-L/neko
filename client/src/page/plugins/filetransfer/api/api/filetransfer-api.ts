/* tslint:disable */
/* eslint-disable */
/**
 * n.eko REST API
 * Next Gen Renderer Browser.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, operationServerMap } from '../base';
import type { RequestArgs, RequiredError } from '../base';
// @ts-ignore
import type { ErrorMessage } from '../models';
/**
 * FiletransferApi - axios parameter creator
 * @export
 */
export const FiletransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary download file
         * @param {string} filename The file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (filename: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('downloadFile', 'filename', filename)
            const localVarPath = `/api/filetransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upload file
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/filetransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FiletransferApi - functional programming interface
 * @export
 */
export const FiletransferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FiletransferApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary download file
         * @param {string} filename The file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(filename: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(filename, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FiletransferApi.downloadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary upload file
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FiletransferApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FiletransferApi - factory interface
 * @export
 */
export const FiletransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FiletransferApiFp(configuration)
    return {
        /**
         * 
         * @summary download file
         * @param {string} filename The file name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(filename: string, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFile(filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary upload file
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.uploadFile(files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FiletransferApi - object-oriented interface
 * @export
 * @class FiletransferApi
 * @extends {BaseAPI}
 */
export class FiletransferApi extends BaseAPI {
    /**
     * 
     * @summary download file
     * @param {string} filename The file name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiletransferApi
     */
    public downloadFile(filename: string, options?: RawAxiosRequestConfig) {
        return FiletransferApiFp(this.configuration).downloadFile(filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary upload file
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiletransferApi
     */
    public uploadFile(files?: Array<File>, options?: RawAxiosRequestConfig) {
        return FiletransferApiFp(this.configuration).uploadFile(files, options).then((request) => request(this.axios, this.basePath));
    }
}

